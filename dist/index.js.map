{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;IAMqB,aAAa,GAChC,SADmB,aAAa,GA8B/B;MA7BW,OAAO,yDACjB;AACE,QAAI,EAAC,OAAO;AACZ,SAAK,EAAC,IAAI;AACV,SAAK,EAAC,EAAE;AACR,QAAI,EAAC;AACH,SAAG,EAAC;AACF,cAAM,EAAC,KAAK;AACZ,WAAG,EAAC,8BAA8B;OACnC;AACD,WAAK,EAAC;AACJ,cAAM,EAAC,MAAM;AACb,WAAG,EAAC,8BAA8B;OACnC;AACD,UAAI,EAAC;AACH,cAAM,EAAC,KAAK;AACZ,WAAG,EAAC,kCAAkC;OACvC;AACD,YAAM,EAAC;AACL,cAAM,EAAC,KAAK;AACZ,WAAG,EAAC,kCAAkC;OACvC;AACD,aAAO,EAAC;AACN,cAAM,EAAC,QAAQ;AACf,WAAG,EAAC,kCAAkC;OACvC;KACF;;GAEF;;wBA7BgB,aAAa;;AAgC9B,MAAI,OAAO,GAAG,EAAE,CAAC;AACjB,mBAAE,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,UAAS,GAAG,EAAE,KAAK,EAAC;AACvC,WAAO,CAAC,KAAK,CAAC,GAAG,sBAAgB;AAC/B,UAAI,EAAE,OAAO,CAAC,IAAI;AAClB,SAAG,EAAE,GAAG,CAAC,GAAG;AACZ,YAAM,EAAE,GAAG,CAAC,MAAM;KACnB,EAAE,KAAK,CAAC,CAAA;GACV,CAAC,CAAA;;AAEF,MAAI,CAAC,OAAO,GAAG,OAAO,CAAA;AACtB,MAAI,CAAC,OAAO,GAAG,OAAO,CAAA;AACtB,MAAI,CAAC,QAAQ,GAAG,YAAwB;QAAvB,KAAK,yDAAG,EAAE;QAAE,MAAM;;;;;;;;;;AAUjC,YAAQ,MAAM,CAAC,IAAI;AACjB,WAAK,gBAAgB;;AAErB,gBAAQ,MAAM,CAAC,MAAM;AACnB,eAAK,KAAK;AACV,mBAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACzB,gBAAI,IAAI,GAAG,iBAAE,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAChC,gBAAI,KAAK,GAAG,iBAAE,SAAS,CAAC,KAAK,EAAE,EAAC,EAAE,EAAC,IAAI,CAAC,EAAE,EAAC,CAAC,CAAA;AAC5C,iBAAK,CAAC,KAAK,CAAC,GAAC,IAAI,CAAA;AACjB,mBAAO,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AACxB,gDACK,KAAK,GACT;AACH,kBAAM;AAAA,AACN;AACE,gDACK,KAAK,sBACL,MAAM,CAAC,IAAI,GACf;AACH,kBAAM;AAAA,SACP;;AAED,cAAM;;;;AAAA,AAIN;AACA,eAAO,KAAK,CAAA;AAAA,KACb;GAEF,CAAA;CACF;;kBApFkB,aAAa","file":"index.js","sourcesContent":["import _ from 'lodash'\nimport 'isomorphic-fetch'\nimport FluxActions from './actions'\n\nimport {ACTION_FETCH, ACTION_SUCCESS, ACTION_FAIL, ACTION_RESET} from './constants'\n\nexport default class FluxReducitor{\n  constructor(options =\n    {\n      name:'users',\n      index:'id',\n      fetch:{},\n      urls:{\n        all:{\n          method:'get',\n          url:'http://example.com/api/users'\n        },\n        store:{\n          method:'post',\n          url:'http://example.com/api/users'\n        },\n        show:{\n          method:'get',\n          url:'http://example.com/api/users/:id'\n        },\n        update:{\n          method:'put',\n          url:'http://example.com/api/users/:id'\n        },\n        destroy:{\n          method:'delete',\n          url:'http://example.com/api/users/:id'\n        }\n      }\n\n    }\n  ){\n\n    let actions = [];\n    _.each(options.urls, function(url, index){\n      actions[index] = new FluxActions({\n        name: options.name,\n        url: url.url,\n        method: url.method\n      }, fetch)\n    })\n\n    this.actions = actions\n    this.options = options\n    this.reducers = (state = [], action) => {\n      // console.log(action.method)\n      // if(action.method == 'post'){\n      //   console.log( options.name, 'was called with state', _.countBy(state), 'and action', action.type, 'and data', action.data )\n      //   console.log(options.name, '==', action.name)\n      // }\n\n      //console.log(action.url);\n\n\n      switch (action.type) {\n        case 'ACTION_SUCCESS':\n\n        switch (action.method) {\n          case 'put':\n          console.log(action.data);\n          let data = _.first(action.data);\n          let index = _.findIndex(state, {id:data.id})\n          state[index]=data\n          console.log(index, state);\n            return [\n              ...state\n            ]\n          break;\n          default:\n            return[\n              ...state,\n              ...action.data\n            ]\n          break;\n        }\n\n        break;\n        /*case ACTION_FETCH:\n        case ACTION_FAIL:\n        case ACTION_RESET:*/\n        default:\n        return state\n      }\n\n    }\n  }\n}\n"]}